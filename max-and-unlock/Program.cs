using CommandLine;
using CommandLine.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace max_and_unlock
{
	class program
	{ 
		public class Options
		{
			[Option('s', "save", Required = true, HelpText = "Path to .SAV file")]
			public string SaveFile { get; set; }

			[Option('a', "ammo", Default =-1, Required = false, HelpText = "New ammunition count 0-999,999")]
			public int Ammo { get; set; }
		
			[Option('r', "resources", Default = -1, Required = false, HelpText = "New resource count 0-999,999")]
			public int Resources { get; set; }

			[Option('t', "tables", Default = -1, Required = false, HelpText = "New table level 0-9")]
			public int Tables { get; set; }

			[Option('u', "unlocks", Default = -1, Required = false, HelpText = "0=none, 1=CH1 unlocks, 2=CH1 & CH2 unlocks")]
			public int Unlocks { get; set; }
		}

		// Input parameters
		static int newAmmoAmountValue = -1;
		static Int32 newResourceAmountValue = -1;
		static Int32 newStationProgressLevelValue = -1; // 0-9
		static SpecialUnlocks newSpecialUnlocks = SpecialUnlocks.NoChange;

		static byte[][] ammoGuids = new byte[][] {

			// Chapter 1
			new byte[] { 0xb5, 0xbe, 0xf5, 0xd0, 0xcc, 0xe2, 0x78, 0x40, 0xaf, 0xa8, 0x57, 0xa1, 0x6d, 0x0f, 0x90, 0x3b }, // .30
			new byte[] { 0xcc, 0x34, 0xb9, 0x6c, 0x1f, 0xff, 0x71, 0x40, 0xa1, 0xe1, 0x3b, 0x4e, 0xa9, 0x29, 0x78, 0xe7 }, // 9mm
			new byte[] { 0x51, 0x53, 0x47, 0xdc, 0x43, 0x95, 0x79, 0x41, 0x87, 0x00, 0x89, 0xc3, 0x47, 0xe3, 0xed, 0x86 }, // .45
			new byte[] { 0x73, 0xce, 0x6a, 0xd8, 0x73, 0x43, 0xa2, 0x45, 0xae, 0x53, 0x16, 0x35, 0x34, 0x70, 0xdf, 0x0d }, // 12 Gauge
			new byte[] { 0xf4, 0xca, 0xaf, 0xff, 0xdc, 0x15, 0xd4, 0x43, 0xbf, 0xb5, 0xd1, 0x99, 0x27, 0x13, 0xba, 0xea }, // 7.62
			new byte[] { 0x6d, 0x7b, 0xc6, 0x57, 0x08, 0xa3, 0x90, 0x4d, 0xa6, 0xf7, 0x8b, 0x01, 0xa9, 0x28, 0x38, 0x14 }, // 5.56
			new byte[] { 0x17, 0x17, 0xe8, 0x92, 0xe2, 0xd6, 0x26, 0x4b, 0xa4, 0x72, 0x24, 0xad, 0x92, 0x0a, 0x49, 0xd0 }, // Explosive Arrows
			new byte[] { 0x16, 0x43, 0x36, 0x63, 0x2d, 0x33, 0x4a, 0x4a, 0x86, 0xf1, 0xe1, 0x11, 0x23, 0x29, 0xfe, 0x59 }, // Noise Arrows

			// Chapter 2
			new byte[] { 0x0D, 0x3C, 0x01, 0xFE, 0x86, 0x2F, 0x82, 0x49, 0x97, 0x5F, 0x03, 0xE7, 0xAF, 0x92, 0x83, 0xE0 }, // Chainsaw Fuel
			new byte[] { 0x8A, 0xBF, 0xE0, 0xC2, 0x13, 0x04, 0x5A, 0x41, 0xBF, 0x22, 0x9E, 0x83, 0x7A, 0xC2, 0x70, 0x1D }, // .416
			new byte[] { 0x6E, 0xB2, 0x7B, 0x16, 0xB1, 0x7D, 0x68, 0x46, 0x8C, 0x0D, 0x95, 0xFD, 0x34, 0x6E, 0x6F, 0xD0 }, // .470
			new byte[] { 0xAB, 0xFF, 0x0A, 0xF3, 0xD9, 0x4F, 0xA1, 0x47, 0x83, 0xC6, 0xC3, 0x60, 0x6A, 0x61, 0x32, 0x66 }, // SMG
			new byte[] { 0x3F, 0x2A, 0xAF, 0xBA, 0xCF, 0x3B, 0x2B, 0x45, 0x87, 0x38, 0xC9, 0xC7, 0xD0, 0x6B, 0xD7, 0xC7 }, // Grenade Launcher
			new byte[] { 0xA8, 0xC2, 0x7B, 0x88, 0x7A, 0x98, 0xDB, 0x4F, 0xB0, 0x57, 0xE6, 0x18, 0x05, 0xC9, 0x24, 0x37 }, // Flare-O
		};

		static byte[] regularArrowPostfix = {
			0x0B, 0x00, 0x00, 0x00, 0x44, 0x75, 0x72, 0x61, 0x62, 0x69, 0x6C, 0x69,
			0x74, 0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74,
			0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x42, 0x09, 0x00,
			0x00, 0x00, 0x71, 0x75, 0x61, 0x6E, 0x74, 0x69, 0x74, 0x79, 0x00, 0x0C,
			0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72,
			0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		static byte[] regularArrowGuid = new byte[]{
			0xe3, 0xf1, 0x02, 0x1c, 0x51, 0xa7, 0xdf, 0x43, 0x88, 0x13, 0x1c, 0x89,
			0xb3, 0x26, 0x73, 0x3c };

		static int ammoValueOffset = 84;

		static byte[] ammoKeyPrefix = {
			0x73, 0x6C, 0x6F, 0x74, 0x49, 0x64, 0x78, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x42, 0x79, 0x74, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
			0x00, 0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x75, 0x69, 0x64, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x75,
			0x63, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x10,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x47,
			0x75, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

		static byte[][] resourceGuids = new byte[][] {

			// Chapter 1
			new byte[] { 0x5c, 0x33, 0x29, 0xb8, 0x3b, 0x72, 0xd7, 0x48, 0x87, 0x56, 0xb7, 0x85, 0x83, 0xe0, 0x51, 0xa6 }, // Adhesives
			new byte[] { 0xf1, 0x82, 0x55, 0x71, 0xe1, 0x2e, 0xc6, 0x47, 0xb2, 0x3d, 0xe1, 0x47, 0xb0, 0xf1, 0x89, 0xc3 }, // Antiseptics
			new byte[] { 0xc4, 0xdf, 0x12, 0x08, 0x24, 0x7c, 0x28, 0x4d, 0x85, 0x53, 0x7e, 0xcc, 0x53, 0xa5, 0x7f, 0x10 }, // Bindings
			new byte[] { 0xfb, 0x2f, 0x95, 0x26, 0x87, 0x27, 0xcd, 0x40, 0x93, 0xae, 0x1e, 0x53, 0x06, 0x64, 0xdb, 0xf6 }, // Fiber
			new byte[] { 0x82, 0xff, 0x03, 0x06, 0x72, 0xb6, 0x82, 0x48, 0xa2, 0xb6, 0x5d, 0x90, 0xc3, 0x32, 0x13, 0xc7 }, // Gun Powder
			new byte[] { 0x18, 0x84, 0x53, 0xb2, 0x23, 0xa7, 0xfd, 0x4e, 0x87, 0xd3, 0x25, 0x91, 0x71, 0x7c, 0x38, 0x3a }, // Nuts and Bolts
			new byte[] { 0x94, 0x16, 0x2e, 0x64, 0x04, 0xca, 0xba, 0x49, 0x91, 0x85, 0x65, 0xe7, 0x13, 0x94, 0xd1, 0x80 }, // Pistol Frames
			new byte[] { 0xcd, 0xa2, 0xdc, 0x2d, 0x29, 0x5d, 0x19, 0x42, 0xbc, 0xa3, 0x68, 0xd1, 0x5e, 0xcd, 0x66, 0x3a }, // Shafts
			new byte[] { 0xfc, 0x43, 0xf2, 0x47, 0x61, 0xcb, 0x8d, 0x40, 0xb4, 0x89, 0xa0, 0xf4, 0xda, 0x59, 0xd3, 0x1b }, // Sharp Objects
			new byte[] { 0x9e, 0x1e, 0xa7, 0xe2, 0x9e, 0xb0, 0xbc, 0x48, 0xbb, 0x1d, 0x51, 0xc2, 0x74, 0x53, 0xbb, 0x9b }, // Shotgun Frames
			new byte[] { 0x36, 0x84, 0x66, 0x8e, 0xf1, 0xcb, 0xa5, 0x4b, 0xb7, 0xb4, 0x29, 0xe7, 0x51, 0x00, 0xd7, 0x04 }, // Spice
			new byte[] { 0x80, 0x37, 0xfe, 0xfb, 0x9c, 0xff, 0x0e, 0x40, 0xad, 0xcd, 0xc5, 0x17, 0x29, 0x10, 0x49, 0x66 }, // Sugar
			new byte[] { 0x91, 0x19, 0xe7, 0xdf, 0xc2, 0x73, 0x1e, 0x43, 0x8c, 0xc8, 0x28, 0x78, 0xba, 0x6d, 0x0e, 0xde }, // Water
			new byte[] { 0xec, 0x99, 0x50, 0x09, 0xc7, 0x54, 0x7d, 0x4f, 0xb6, 0xc7, 0x97, 0xc6, 0xbb, 0x6d, 0x42, 0x2f }, // Wood Scraps
			new byte[] { 0xc1, 0x0a, 0xe0, 0x03, 0xd9, 0xf3, 0x71, 0x4a, 0x9b, 0x45, 0x23, 0xcd, 0x99, 0xec, 0x16, 0x30 }, // Workable Metal
			new byte[] { 0x7c, 0xad, 0x58, 0xe4, 0x5d, 0x2e, 0x82, 0x47, 0x88, 0xe0, 0x59, 0x83, 0xda, 0x43, 0xfb, 0xc2 }, // Proteins
			new byte[] { 0xeb, 0x7e, 0x3d, 0xea, 0xa3, 0x67, 0xad, 0x48, 0xa0, 0x66, 0x64, 0xd0, 0xca, 0xa3, 0x7c, 0xb9 }, // Rifle Frames

			// Chapter 2
			new byte[] { 0xAD, 0x38, 0x96, 0x2A, 0x23, 0x89, 0xA8, 0x40, 0xAF, 0xB3, 0x6C, 0x9C, 0xA1, 0x84, 0x5D, 0x74 }, // Biomass
			new byte[] { 0x9A, 0x93, 0xF9, 0x8C, 0xB7, 0x48, 0x20, 0x48, 0xA9, 0xBD, 0x08, 0x05, 0xEB, 0x18, 0x02, 0x7E }, // Leather
			new byte[] { 0x82, 0xA7, 0x6B, 0xFF, 0x83, 0x24, 0xE0, 0x48, 0xB2, 0xED, 0x10, 0xC4, 0xFE, 0x49, 0xE2, 0x03 }, // Phosphorus
			new byte[] { 0x95, 0x82, 0xD3, 0x98, 0x9F, 0xCF, 0x12, 0x4D, 0x87, 0x5A, 0x66, 0x57, 0x6E, 0x79, 0xC9, 0x76 }, // Plasic
			new byte[] { 0xF3, 0x43, 0x29, 0xD6, 0x4F, 0x91, 0x78, 0x4A, 0x99, 0xAD, 0xF1, 0x69, 0x52, 0x5F, 0x33, 0xA7 }, // Rubber
			new byte[] { 0x23, 0xA5, 0x9B, 0x22, 0xAD, 0xB5, 0x52, 0x4C, 0xA4, 0xE7, 0x6D, 0xBF, 0xF2, 0x8F, 0xC9, 0x2D }, // SMG Frames
			new byte[] { 0x0B, 0x9E, 0xCB, 0x07, 0xCB, 0xBB, 0xAF, 0x4B, 0xAE, 0x8A, 0x0C, 0xC9, 0xFF, 0xDE, 0xA6, 0x57 }, // Steel Pipe
			new byte[] { 0xB7, 0xE2, 0xDA, 0x0F, 0x94, 0xE5, 0x74, 0x42, 0xA4, 0x14, 0x85, 0xDF, 0x7B, 0xE4, 0xC8, 0x61 }, // Stimulants
			new byte[] { 0xC3, 0xAD, 0x07, 0x9F, 0xCD, 0x69, 0xEB, 0x43, 0xAA, 0xBC, 0x58, 0x21, 0x31, 0xAE, 0x84, 0xE2 }, // Casing
			new byte[] { 0x98, 0x87, 0x6B, 0x14, 0x86, 0x4A, 0x26, 0x4F, 0xBE, 0x9E, 0xF2, 0xAD, 0x80, 0x84, 0x67, 0x5B }, // Conductor
		};

		static int resourceValueOffset = 84;

		static int stationProgressOffset = 1;

		static byte[] gearStationProgressKey = {
			0x42, 0x50, 0x5F, 0x47, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6F, 0x67, 0x72,
			0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x43
		};

		static byte[] gunStationProgressKey = {
			0x42, 0x50, 0x5F, 0x47, 0x75, 0x6E, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65,
			0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x43
		};

		static byte[] survivalStationProgressKey = {
			0x42, 0x50, 0x5F, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6C, 0x50,
			0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
			0x6F, 0x6E, 0x5F, 0x43
		};

		static byte[] ch2ProgressionStation01ProgressKey = {
			0x42, 0x50, 0x5F, 0x43, 0x48, 0x32, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65,
			0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x30, 0x31,
			0x5F, 0x43
		};

		static byte[] ch2ProgressionStation02ProgressKey = {
			0x42, 0x50, 0x5F, 0x43, 0x48, 0x32, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65,
			0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x30, 0x32,
			0x5F, 0x43
		};

		static int craftingTableSpecialUnlocksLengthOffset = 17;
		static int craftingTableSpecialUnlocksLengthStartOffset = 24;

		static byte[] craftingTableSpecialUnlocksKey = {
			0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6E, 0x67, 0x54, 0x61, 0x62, 0x6C,
			0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x55, 0x6E, 0x6C, 0x6F,
			0x63, 0x6B, 0x73
		};

		// Chapter 1 All Special Unlocks
		static byte[] chapter1CraftingTableSpecialUnlocks = {
			0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6E, 0x67, 0x54, 0x61, 0x62, 0x6C,
			0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x55, 0x6E, 0x6C, 0x6F,
			0x63, 0x6B, 0x73, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x65, 0x74, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x5E, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0F, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x65,
			0x61, 0x76, 0x65, 0x72, 0x32, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x69, 0x63, 0x6B, 0x79,
			0x50, 0x72, 0x6F, 0x78, 0x69, 0x6D, 0x69, 0x74, 0x79, 0x4D, 0x69, 0x6E,
			0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x12, 0x00,
			0x00, 0x00, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x78, 0x65, 0x52,
			0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x1C, 0x00, 0x00, 0x00,
			0x54, 0x69, 0x6D, 0x65, 0x64, 0x4E, 0x6F, 0x69, 0x73, 0x65, 0x4D, 0x61,
			0x6B, 0x65, 0x72, 0x42, 0x6F, 0x6D, 0x62, 0x52, 0x65, 0x63, 0x69, 0x70,
			0x65, 0x5F, 0x43, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x61, 0x77,
			0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x14, 0x00,
			0x00, 0x00, 0x4C, 0x65, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6F,
			0x6E, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x0D, 0x00,
			0x00, 0x00, 0x4D, 0x34, 0x31, 0x36, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
			0x5F, 0x43, 0x00, 0x12, 0x00, 0x00, 0x00, 0x35, 0x35, 0x36, 0x6D, 0x6D,
			0x41, 0x6D, 0x6D, 0x6F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43,
			0x00, 0x13, 0x00, 0x00, 0x00, 0x34, 0x35, 0x52, 0x65, 0x76, 0x6F, 0x6C,
			0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00,
			0x16, 0x00, 0x00, 0x00, 0x34, 0x35, 0x63, 0x61, 0x6C, 0x69, 0x62, 0x65,
			0x72, 0x41, 0x6D, 0x6D, 0x6F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x12, 0x00, 0x00, 0x00, 0x4A, 0x61, 0x6D, 0x62, 0x61, 0x6C,
			0x61, 0x79, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00,
			0x0E, 0x00, 0x00, 0x00, 0x47, 0x75, 0x6D, 0x62, 0x6F, 0x52, 0x65, 0x63,
			0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x10, 0x00, 0x00, 0x00, 0x42, 0x65,
			0x69, 0x67, 0x6E, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x77, 0x32, 0x52, 0x65,
			0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x18, 0x00, 0x00, 0x00, 0x45,
			0x78, 0x70, 0x6C, 0x6F, 0x73, 0x69, 0x76, 0x65, 0x41, 0x72, 0x72, 0x6F,
			0x77, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43
		};

		// Chapter 1 & Chapter 2 All Special Unlocks
		static byte[] chapter1And2CraftingTableSpecialUnlocks =  {
			0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6E, 0x67, 0x54, 0x61, 0x62, 0x6C,
			0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x55, 0x6E, 0x6C, 0x6F,
			0x63, 0x6B, 0x73, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x65, 0x74, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x48, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x17, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x65,
			0x61, 0x76, 0x65, 0x72, 0x32, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x69, 0x63, 0x6B, 0x79,
			0x50, 0x72, 0x6F, 0x78, 0x69, 0x6D, 0x69, 0x74, 0x79, 0x4D, 0x69, 0x6E,
			0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x12, 0x00,
			0x00, 0x00, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x78, 0x65, 0x52,
			0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x1C, 0x00, 0x00, 0x00,
			0x54, 0x69, 0x6D, 0x65, 0x64, 0x4E, 0x6F, 0x69, 0x73, 0x65, 0x4D, 0x61,
			0x6B, 0x65, 0x72, 0x42, 0x6F, 0x6D, 0x62, 0x52, 0x65, 0x63, 0x69, 0x70,
			0x65, 0x5F, 0x43, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x43, 0x6C, 0x61, 0x77,
			0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x14, 0x00,
			0x00, 0x00, 0x4C, 0x65, 0x76, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6F,
			0x6E, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x0D, 0x00,
			0x00, 0x00, 0x4D, 0x34, 0x31, 0x36, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
			0x5F, 0x43, 0x00, 0x12, 0x00, 0x00, 0x00, 0x35, 0x35, 0x36, 0x6D, 0x6D,
			0x41, 0x6D, 0x6D, 0x6F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43,
			0x00, 0x13, 0x00, 0x00, 0x00, 0x34, 0x35, 0x52, 0x65, 0x76, 0x6F, 0x6C,
			0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00,
			0x16, 0x00, 0x00, 0x00, 0x34, 0x35, 0x63, 0x61, 0x6C, 0x69, 0x62, 0x65,
			0x72, 0x41, 0x6D, 0x6D, 0x6F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x12, 0x00, 0x00, 0x00, 0x4A, 0x61, 0x6D, 0x62, 0x61, 0x6C,
			0x61, 0x79, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00,
			0x0E, 0x00, 0x00, 0x00, 0x47, 0x75, 0x6D, 0x62, 0x6F, 0x52, 0x65, 0x63,
			0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x10, 0x00, 0x00, 0x00, 0x42, 0x65,
			0x69, 0x67, 0x6E, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x6F, 0x77, 0x32, 0x52, 0x65,
			0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x18, 0x00, 0x00, 0x00, 0x45,
			0x78, 0x70, 0x6C, 0x6F, 0x73, 0x69, 0x76, 0x65, 0x41, 0x72, 0x72, 0x6F,
			0x77, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x1B,
			0x00, 0x00, 0x00, 0x49, 0x6D, 0x70, 0x72, 0x6F, 0x76, 0x65, 0x64, 0x46,
			0x6C, 0x61, 0x73, 0x68, 0x6C, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63,
			0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x15, 0x00, 0x00, 0x00, 0x53, 0x4D,
			0x47, 0x5F, 0x48, 0x69, 0x67, 0x68, 0x45, 0x6E, 0x64, 0x5F, 0x52, 0x65,
			0x63, 0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x44,
			0x6F, 0x75, 0x62, 0x6C, 0x65, 0x42, 0x61, 0x72, 0x72, 0x65, 0x6C, 0x53,
			0x61, 0x77, 0x65, 0x64, 0x4F, 0x66, 0x66, 0x5F, 0x52, 0x65, 0x63, 0x69,
			0x70, 0x65, 0x5F, 0x43, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x48, 0x69, 0x67,
			0x68, 0x5F, 0x43, 0x61, 0x6C, 0x69, 0x62, 0x65, 0x72, 0x5F, 0x41, 0x72,
			0x6D, 0x6F, 0x72, 0x5F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43,
			0x00, 0x19, 0x00, 0x00, 0x00, 0x47, 0x72, 0x65, 0x6E, 0x61, 0x64, 0x65,
			0x4C, 0x61, 0x75, 0x6E, 0x63, 0x68, 0x65, 0x72, 0x5F, 0x52, 0x65, 0x63,
			0x69, 0x70, 0x65, 0x5F, 0x43, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x53, 0x61,
			0x70, 0x47, 0x6C, 0x6F, 0x76, 0x65, 0x73, 0x5F, 0x48, 0x69, 0x67, 0x68,
			0x45, 0x6E, 0x64, 0x5F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x43,
			0x00, 0x15, 0x00, 0x00, 0x00, 0x48, 0x61, 0x6E, 0x64, 0x47, 0x72, 0x65,
			0x6E, 0x61, 0x64, 0x65, 0x5F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F,
			0x43, 0x00, 0x17, 0x00, 0x00, 0x00, 0x47, 0x72, 0x61, 0x70, 0x70, 0x6C,
			0x65, 0x5F, 0x41, 0x72, 0x6D, 0x6F, 0x72, 0x5F, 0x52, 0x65, 0x63, 0x69,
			0x70, 0x65, 0x5F, 0x43
		};

		// No Special Unlocks
		static byte[] noSpecialUnlocks = {
			0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6E, 0x67, 0x54, 0x61, 0x62, 0x6C,
			0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x55, 0x6E, 0x6C, 0x6F,
			0x63, 0x6B, 0x73, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x65, 0x74, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x09, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x50,
			0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00
		};

		static void DisplayHelp<T>(ParserResult<T> result, IEnumerable<Error> errs)
		{
			var helpText = HelpText.AutoBuild(result, h =>
			{
				h.AdditionalNewLineAfterOption = false;
				h.Heading = "  substatica";
				h.Copyright = "  youtube.com/substatica";
				h.AdditionalNewLineAfterOption = true;
				return HelpText.DefaultParsingErrorsHandler(result, h);
			}, e => e);
			Console.WriteLine(helpText);
		}

		static void Main(string[] args)
		{
			Console.WriteLine("  ----------------------------------------------------------");
			Console.WriteLine("  Max & Unlock for The Walking Dead: Saints & Sinners Series");
			Console.WriteLine("  ----------------------------------------------------------");
			Console.WriteLine();

			string filename = null;

			var parser = new CommandLine.Parser(with => with.HelpWriter = null);
			var parserResult = parser.ParseArguments<Options>(args);

			parserResult
				.WithNotParsed(errs => DisplayHelp(parserResult, errs))
				.WithParsed<Options>(o =>
				{
					filename = o.SaveFile;
					newAmmoAmountValue = o.Ammo;
					newResourceAmountValue = o.Resources;
					newStationProgressLevelValue = o.Tables;
					  
					switch(o.Unlocks)
					{
						case 0:
							newSpecialUnlocks = SpecialUnlocks.None;
							break;
						case 1:
							newSpecialUnlocks = SpecialUnlocks.AllChapter1Unlocks;
							break;
						case 2:
							newSpecialUnlocks = SpecialUnlocks.AllChapter1AndChapter2Unlocks;
							break;
					}			
				});

			if(!File.Exists(filename))
			{
				Console.WriteLine("Error: File not found");
				return;
			}

			string backupFilename = filename + ".bak";
			if(File.Exists(backupFilename))
			{
				int i = 1;
				while (File.Exists(backupFilename))
				{
					backupFilename = filename + ".bak. " + i.ToString("D3");
					i++;
				}
			}

			try
			{
				File.Copy(filename, backupFilename);
			}
			catch
			{
				Console.WriteLine("Error: Could not create backup");
				return;
			}

			try
			{
				var fileBytes = File.ReadAllBytes(filename);
				int offset;

				if(newSpecialUnlocks != SpecialUnlocks.NoChange) { 
				offset = GetPositionAfterMatch(fileBytes, craftingTableSpecialUnlocksKey);
				if (offset < 0)
					throw new Exception("Error: Special unlocks key not found");

					// Bytes before existing special unlocks section
					Byte[] pre = new Byte[offset - craftingTableSpecialUnlocksKey.Length];
					Array.Copy(fileBytes, 0, pre, 0, offset - craftingTableSpecialUnlocksKey.Length);

					// Length of existing special unlocks section
					var length = BitConverter.ToInt32(fileBytes, offset + craftingTableSpecialUnlocksLengthOffset);

					// Bytes after existing special unlocks section
					var postOffset = offset + craftingTableSpecialUnlocksLengthOffset + craftingTableSpecialUnlocksLengthStartOffset + length;
					Byte[] post = new byte[fileBytes.Length - postOffset];
					Array.Copy(fileBytes, postOffset, post, 0, fileBytes.Length - postOffset);

					byte[] newUnlocks = noSpecialUnlocks;

					switch (newSpecialUnlocks)
					{
						case SpecialUnlocks.AllChapter1Unlocks:
							newUnlocks = chapter1CraftingTableSpecialUnlocks;
							break;
						case SpecialUnlocks.AllChapter1AndChapter2Unlocks:
							newUnlocks = chapter1And2CraftingTableSpecialUnlocks;
							break;
					}

					// Write new file
					var newFileBytes = pre.Concat(newUnlocks).Concat(post).ToArray();
					File.WriteAllBytes(filename, newFileBytes);
					fileBytes = newFileBytes;
				}

				// Open new file to update amounts
				BinaryWriter bw = new BinaryWriter(File.OpenWrite(filename));

				if (newAmmoAmountValue > -1)
				{
					// Ammo
					foreach (byte[] bytes in ammoGuids)
					{
						ReplaceBytes(fileBytes, bw, ammoKeyPrefix.Concat(bytes).ToArray(), ammoValueOffset, newAmmoAmountValue);
					}

					// Regular arrows
					ReplaceBytes(fileBytes, bw, ammoKeyPrefix.Concat(regularArrowGuid).Concat(regularArrowPostfix).ToArray(), 0, newAmmoAmountValue);
				}

				if (newResourceAmountValue > -1)
				{
					// Resources
					foreach (byte[] bytes in resourceGuids)
					{
						ReplaceBytes(fileBytes, bw, bytes, resourceValueOffset, newResourceAmountValue);
					}
				}

				if (newStationProgressLevelValue > -1)
				{
					// Station progress
					foreach (Byte[] r in new Byte[][] {
						gearStationProgressKey,
						gunStationProgressKey,
						survivalStationProgressKey,
						ch2ProgressionStation01ProgressKey,
						ch2ProgressionStation02ProgressKey
					})
					{
						ReplaceBytes(fileBytes, bw, r, stationProgressOffset, newStationProgressLevelValue);
					}
				}

				bw.Dispose();
			}
			catch(Exception ex)
			{
				Console.WriteLine("Error: " + ex);
			}
		}

		static bool ReplaceBytes(byte[] fileBytes, BinaryWriter bw, byte[] searchArray, int valueOffset, int newValue)
		{
			int offset = GetPositionAfterMatch(fileBytes, searchArray);

			if (offset < 0)
			{
				Console.WriteLine("Warning: Key not found");
				return false;
			}

			bw.Seek(offset + valueOffset, SeekOrigin.Begin);
			byte[] intBytes = BitConverter.GetBytes(newValue);
			bw.Write(intBytes);
			return true;
		}

		static string BytesToHexString(byte[] bytes)
		{
			string result = "{ ";
			foreach(byte b in bytes)
			{
				result += $"0x{ b:x2}, ";
			}
			result += " }";
			return result;
		}

		static int GetPositionAfterMatch(byte[] data, byte[] pattern)
		{
			try
			{
				for (int i = 0; i < data.Length - pattern.Length; i++)
				{
					bool match = true;
					for (int k = 0; k < pattern.Length; k++)
					{
						if (data[i + k] != pattern[k])
						{
							match = false;
							break;
						}
					}
					if (match)
					{
						return i + pattern.Length;
					}
				}
			}
			catch(Exception ex)
			{
				Console.WriteLine("Error: " + ex);
			}
			return -1;
		}
	}

	enum SpecialUnlocks
	{
		NoChange,
		None,
		AllChapter1Unlocks,
		AllChapter1AndChapter2Unlocks
	}
}
